version: '3'

services:
  postgres:
    image: postgres
    container_name: swa_postgres    
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    expose:
      - ${POSTGRES_PORT}
    healthcheck:
      test: ["CMD", "psql", "${POSTGRES_USER}", "-h", "0.0.0.0", "-d", "${POSTGRES_DB}"]
      interval: 5s
    volumes:
      - postgresdata:/var/lib/postgresql/data    
    networks:
      - statistics_user
      - postgres_db_admin  
    restart: unless-stopped

  mongodb:
    image: mongo:4.0.8
    container_name: swa_mongodb
    environment:
      MONGO_INITDB_DATABASE: root-db
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGODB_DATA_DIR: /data/db
      MONDODB_LOG_DIR: /dev/null
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.runCommand('ping').ok", "localhost:${MONGO_PORT}/${NOTIFICATION_DATABASE_NAME}", "--quiet"]
      interval: 5s
      timeout: 5s
      retries: 12
    expose:
      - ${MONGO_PORT}
    command: mongod --auth
    volumes:
      - "./mongo-init/:/docker-entrypoint-initdb.d/"
      - mongodbdata:/var/lib/mongodb/data
    networks:
      - marketplace_user
      - notification_user
    restart: unless-stopped
  
  mysql:
    image: mysql:latest
    container_name: swa_mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    expose:
      - ${MYSQL_PORT}
    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - mysqldata:/var/lib/mysql   
    networks:
      - users_user
      - mysql_db_admin
    restart: unless-stopped

  eureka:
    build:
      context: ./rengars_eureka
      dockerfile: Dockerfile
    container_name: eureka
    networks:
      - rengars_eureka    
    ports:
      - "${EUREKA_PORT}:${EUREKA_PORT}"
    restart: on-failure

  rabbitmq:
    image: rabbitmq:3-management
    container_name: swa_rabbit_mq
    networks:
      - rengars_rabbit_mq
    expose:
      - ${RABBIT_MQ_PORT}
    ports:
      - 15672:15672
    restart: on-failure
  
  pgadmin:
    image: dpage/pgadmin4
    container_name: swa_pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - ${PGADMIN_PORT}:80
    depends_on:
      - postgres
    volumes:
      - /var/lib/pgadmin    
    networks:
      - postgres_db_admin
    restart: on-failure

  phpmyadmin:
    image: phpmyadmin
    container_name: swa_phpmyadmin    
    environment:
      PMA_ARBITRARY: 1
    ports:
      - ${PHPADMIN_PORT}:80
    depends_on:
      -  mysql
    networks:
      - mysql_db_admin
    restart: on-failure

  users:
    build:
      context: ./swa-rengars-user-service/
      dockerfile: Dockerfile
    container_name: swa_users
    environment:
      EUREKA_URL: "${EUREKA_HOST}:${EUREKA_PORT}"
      RABBIT_MQ_HOST: ${RABBIT_MQ_HOST}
      RABBIT_MQ_PORT: ${RABBIT_MQ_PORT}
      RABBIT_MQ_EXCHANGE: ${RABBIT_MQ_EXCHANGE}
      MYSQL_USERNAME: ${MYSQL_USERNAME}
      MYSQL_HOSTNAME: ${MYSQL_HOSTNAME}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      APP_ENV: ${APP_ENV}
    ports:
      - "${USERS_PORT}:${USERS_PORT}"
    depends_on:
      - mysql
      - rabbitmq 
    volumes:
      - usersdata:/usr/src/users/
    networks:
      - users_user
      - rengars_eureka
      - rengars_rabbit_mq
    restart: on-failure   
  
  marketplace:
    build:
      context: ./rengars_marketplace/
      dockerfile: Dockerfile
      args: 
        MARKETPLACE_PORT: ${MARKETPLACE_PORT}
    container_name: swa_marketplace
    environment:
      APP_ENV: ${APP_ENV}
      APP_DEBUG: ${APP_DEBUG}
      APP_PORT: ${MARKETPLACE_PORT}
      EUREKA_URL: "${EUREKA_HOST}:${EUREKA_PORT}"
      RABBIT_URL: "${RABBIT_MQ_HOST}:${RABBIT_MQ_PORT}"
      RABBIT_EXCHANGE: ${RABBIT_MQ_EXCHANGE}
      MONGODB_DATABASE: ${MARKETPLACE_DATABASE_NAME}
      MONGODB_USERNAME: ${DB_MARKETPLACE_USERNAME}
      MONGODB_PASSWORD: ${DB_MARKETPLACE_PASSWORD}
      MONGODB_HOSTNAME: ${MONGO_HOST}
    depends_on:
      - rabbitmq
      - mongodb
    volumes:
      - marketplacedata:/var/www
    networks:
      - marketplace_webserver
      - marketplace_user
      - rengars_eureka
      - rengars_rabbit_mq
    restart: on-failure

  statistics:
    build:
      context: ./Marketplace-Statistics/
      dockerfile: "Dockerfile.${BUILD_TYPE}"
      args: 
        STATISTICS_PORT: ${STATISTICS_PORT}
    container_name: swa_statistics    
    environment:
      SERVER_PORT: ${STATISTICS_PORT}
      BUILD_TYPE: ${BUILD_TYPE}
      DB_TYPE: ${DB_TYPE}
      DB_URL: ${DB_URL}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      RABBIT_MQ_HOST: ${RABBIT_MQ_HOST}
      RABBIT_MQ_PORT: ${RABBIT_MQ_PORT}
      RABBIT_MQ_EXCHANGE: ${RABBIT_MQ_EXCHANGE}
      RABBIT_MQ_QUEUE: ${STATISTICS_RABBIT_MQ_QUEUE}
    ports:
      - "${STATISTICS_PORT}:${STATISTICS_PORT}"
    depends_on:
      - rabbitmq
      - postgres
    volumes:
      - statisticsdata:/usr/src/statistics/
      - /usr/src/statistics/node_modules    
    networks:
      - statistics_user
      - rengars_rabbit_mq
    restart: on-failure

  notifications:
    build:
      context: ./swa-rengars-notificator/
      dockerfile: Dockerfile
    container_name: swa_notifications    
    environment:
      MONGO_PORT: ${MONGO_PORT}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_DATABASE: ${NOTIFICATION_DATABASE_NAME}
      MONGO_USERNAME: ${DB_NOTIFICATION_USERNAME}
      MONGO_PASSWORD: ${DB_NOTIFICATION_PASSWORD}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      RABBIT_MQ_HOST: ${RABBIT_MQ_HOST}
      RABBIT_MQ_PORT: ${RABBIT_MQ_PORT}
      RABBIT_MQ_EXCHANGE: ${RABBIT_MQ_EXCHANGE}
      RABBIT_MQ_QUEUE: ${NOTIFICATION_RABBIT_MQ_QUEUE}
    ports:
      - ${NOTIFICATION_PORT}:8080
    depends_on:
      - rabbitmq
      - mongodb
    volumes:
      - notificationsdata:/usr/src/notifications/
    networks:
      - notification_user
      - rengars_rabbit_mq
    restart: on-failure

  webserver:
    build:
      context: ./rengars_marketplace/nginx
      dockerfile: Dockerfile
      args: 
        BUILD_TYPE: ${APP_ENV}
    image: digitalocean.com/webserver:latest
    container_name: swa_webserver
    environment:
      APP_ENV: ${APP_ENV}
      APP_DEBUG: ${NGINX_DEBUG}
      APP_NAME: "webserver"
      SERVICE_NAME: "webserver"
    ports:
      - "${WEBSERVER_PORT_1}:81"
      - "${WEBSERVER_PORT_2}:444"
    depends_on:
      - marketplace
    volumes:
      - nginxdata:/var/log/nginx
    networks:
      - marketplace_webserver
    restart: on-failure


networks:  
  postgres_db_admin:
    driver: bridge
  mysql_db_admin:
    driver: bridge
  users_user:
    driver: bridge
  marketplace_user:
    driver: bridge
  statistics_user:
    driver: bridge
  notification_user:
    driver: bridge
  marketplace_webserver:
    driver: bridge
  rengars_eureka:
    driver: bridge
  rengars_rabbit_mq:
    driver: bridge

volumes:
  postgresdata:
    driver: local
  mysqldata:
    driver: local
  mongodbdata:
    driver: local
  usersdata:
    driver: local
  marketplacedata:
    driver: local
  statisticsdata:
    driver: local
  notificationsdata:
    driver: local
  nginxdata:
    driver: local
